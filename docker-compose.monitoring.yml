version: "3.9"
services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - 9090:9090
    command:
      - "--storage.tsdb.path=/prometheus"
      - "--config.file=/etc/prometheus/prometheus.yml"
    restart: always
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3001:3000
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    restart: always
    depends_on:
      - prometheus
    networks:
      - monitoring-network
      - logging-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor

    container_name: cadvisor
    ports:
      - 8081:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring-network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://sa:1234@db:5432/database?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - monitoring-network

  k6:
    image: grafana/k6
    container_name: k6
    ports:
      - "6565:6565"
    entrypoint: [""]
    command: ["tail", "-f", "/dev/null"] # 컨테이너를 계속 실행 상태로 유지
    volumes:
      - ./k6-scripts:/scripts
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    restart: always
    environment:
      REDIS_ADDR: "redis://redis:6379"
    ports:
      - "9121:9121"
    networks:
      - monitoring-network

#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    restart: always
#    ports:
#      - "8082:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
#      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
#    depends_on:
#      - kafka
#    networks:
#      - backend
#      - management
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.kafka-ui.rule=Host(`kafka.mydomain.com`)"
#      - "traefik.http.routers.kafka-ui.entrypoints=websecure"
#      - "traefik.http.routers.kafka-ui.tls=true"
#      - "traefik.http.services.kafka-ui.loadbalancer.server.port=8080"
#      - "traefik.http.routers.kafka-ui.middlewares=security-headers@file,cors@file"

networks:
  monitoring-network:
    name: monitoring-network
    external: true
  logging-network:
    name: logging-network
    external: true

volumes:
  grafana-data:
  prometheus-data:
